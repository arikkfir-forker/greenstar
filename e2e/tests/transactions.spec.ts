import {expect, test} from '@playwright/test';

// TODO: this should be generated by the REST client generator
interface Account {
    id: string
    createdAt: Date
    updatedAt: Date
    balance?: number
    displayName: string
    icon?: string
    parentID?: string
    totalIncomingAmount?: number
    totalOutgoingAmount?: number
}

type AccountID = Account['id']
type AccountsMap = { [p in AccountID]: AccountWithChildren }

interface AccountWithChildren extends Account {
    children: AccountWithChildren[]
}

test('transactions', async ({page}) => {
    await page.goto('/transactions');
    const accountsRes = await page.waitForResponse('https://api.greenstar.test/accounts?currency=USD');
    const accountsResJSON = await accountsRes.json()
    const totalItems = accountsResJSON.totalCount
    expect(totalItems).toEqual(44)

    const accountsByID = accountsResJSON.items.reduce((prevAcc: AccountsMap, acc: Account): AccountsMap => {
        prevAcc[acc.id] = Object.assign({}, acc, {children: []})
        return prevAcc
    }, {})

    const tree: AccountWithChildren[] = []
    for (const accountID in accountsByID) {
        const account = accountsByID[accountID];
        if (account.parentID) {
            const parentAccount = accountsByID[account.parentID];
            if (parentAccount) {
                parentAccount.children.push(account);
            }
        } else {
            tree.push(account);
        }
    }

    // TODO: obtain locale & currency from app somehow
    const balanceFormatter = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD', maximumFractionDigits: 0})

    async function processAccount(account: AccountWithChildren) {
        const balanceLocator = page.getByTestId(`balance:${account.id}`)
        await expect(balanceLocator).toBeAttached()
        await balanceLocator.scrollIntoViewIfNeeded()
        await expect(balanceLocator).toBeVisible()
        expect(await balanceLocator.innerText()).toEqual(balanceFormatter.format(account.balance))

        if (account.children.length) {
            const expandedLocator = page.getByTestId(`expander:${account.id}`)
            await expect(expandedLocator).toBeAttached()
            await expect(expandedLocator).toBeVisible()
            await expandedLocator.click()

            for (const child of account.children) {
                await processAccount(child)
            }
        }
    }

    for (const account of tree) {
        await processAccount(account)
    }
});
