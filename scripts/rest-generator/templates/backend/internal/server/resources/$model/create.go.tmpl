// Code generated by greenstar scripts; DO NOT EDIT.

package {{ .model.Name | toSnake }}

{{- if .model.Create }}

import (
	"encoding/json"
	"github.com/arikkfir/greenstar/backend/internal/server/util"
	"github.com/arikkfir/greenstar/backend/internal/util/observability"
	"github.com/shopspring/decimal"
	"net/http"
	"slices"
	"time"
)

var (
	_ = decimal.Decimal{}
	_ = time.Time{}
)

type CreateRequest struct {
	{{- if .model.Create.AllowExplicitID }}
	ID string `json:"id,omitempty"`
	{{- end }}
	{{- range $name, $p := .model.Properties }}
	{{- if not .ReadOnly }}
	{{ $name }} {{ if not .Required }}*{{ end }}{{ $p.Type.GoType }} `json:"{{ $name | toLowerCamelCase }},omitempty"`
	{{- end }}
	{{- end }}
	properties  []string
}

{{- if .model.Create.AllowExplicitID }}
func (lr *CreateRequest) HasID() bool { return slices.Contains(lr.properties, "id") }
{{- end }}
{{- range $name, $p := .model.Properties }}
{{- if not .Required }}
{{- if not .ReadOnly }}
func (lr *CreateRequest) Has{{ $name }}() bool { return slices.Contains(lr.properties, "{{ $name | toLowerCamelCase }}") }
{{- end }}
{{- end }}
{{- end }}
func (lr *CreateRequest) UnmarshalJSON(data []byte) error {
	lr.properties = nil
	var tempMap map[string]json.RawMessage
	if err := json.Unmarshal(data, &tempMap); err != nil {
		return err
	}
	for key := range tempMap {
		lr.properties = append(lr.properties, key)
	}
	type typeAlias CreateRequest
	alias := (*typeAlias)(lr)
	if err := json.Unmarshal(data, alias); err != nil {
		return err
	}
	return nil
}

type CreateResponse {{ .model.Name }}

func (s *Server) Create(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	l := observability.GetLogger(ctx)

	{{- if gt (len .model.Create.Permissions) 0 }}
	if err := util.VerifyPermissions(ctx, {{ .model.Create.Permissions | strings }}); err != nil {
		util.ServeError(w, r, err)
		return
	}
	{{- end }}

	req := CreateRequest{}
	if err := util.UnmarshalBody(r, &req); err != nil {
		util.ServeError(w, r, err)
		return
	}

	res, err := s.h.Create(ctx, req)
	if err != nil {
		if code := util.ServeError(w, r, err); code >= http.StatusInternalServerError {
			l.ErrorContext(ctx, "Failed creating {{ .model.Name | lower }}", "err", err)
		}
		return
	}

	if err := util.Marshal(w, r, http.StatusCreated, res); err != nil {
		l.ErrorContext(ctx, "Failed marshaling {{ .model.Name | lower }}", "err", err)
		util.ServeError(w, r, err)
	}
}
{{- end }}
