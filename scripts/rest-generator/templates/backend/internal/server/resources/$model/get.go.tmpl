// Code generated by greenstar scripts; DO NOT EDIT.

package {{ .model.Name | toSnake }}

{{- if .model.Get }}

import (
	"github.com/arikkfir/greenstar/backend/internal/server/util"
	"github.com/arikkfir/greenstar/backend/internal/util/observability"
	"github.com/shopspring/decimal"
	"net/http"
	"time"
)

var (
	_ = decimal.Decimal{}
	_ = time.Time{}
)

type GetRequest struct {
	ID       string `json:"id"`
	{{- range $name, $p := .model.Get.Parameters }}
	{{ $name }} *{{ $p.Type.GoType }} `url:"{{ $name | toLowerCamelCase }},omitempty"`
	{{- end }}
}

func (lr *GetRequest) UnmarshalFromRequest(r *http.Request) error {
	lr.ID = r.PathValue("id")
	if lr.ID == "" {
		return util.ErrBadRequest
	}
	return nil
}

type GetResponse {{ .model.Name }}

func (s *Server) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	l := observability.GetLogger(ctx)

	{{- if gt (len .model.Get.Permissions) 0 }}
	if err := util.VerifyPermissions(ctx, {{ .model.Get.Permissions | strings }}); err != nil {
		util.ServeError(w, r, err)
		return
	}
	{{- end }}

	req := GetRequest{}
	if err := req.UnmarshalFromRequest(r); err != nil {
		util.ServeError(w, r, err)
		return
	}

	res, err := s.h.Get(ctx, req)
	if err != nil {
		if code := util.ServeError(w, r, err); code >= http.StatusInternalServerError {
			l.ErrorContext(ctx, "Failed getting {{ .model.Name | lower }}", "err", err)
		}
		return
	} else if res == nil {
		util.ServeError(w, r, util.ErrNotFound)
		return
	}

	if err := util.Marshal(w, r, http.StatusOK, res); err != nil {
		l.ErrorContext(ctx, "Failed marshaling {{ .model.Name | lower }}", "err", err)
		util.ServeError(w, r, err)
	}
}

{{- end }}
