name: Build

on:
  pull_request:
    types:
      - opened
      - synchronize

defaults:
  run:
    shell: bash -exuo pipefail {0}

# TODO: generate workflow summary or comment on the source PR (or both)

jobs:

  docker:
    name: Build ${{ matrix.images.name }} image
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        images:
          - { dir: backend, file: backend/Dockerfile.migrate, name: backend-migrate, imageName: backend-migrate, target: production }
          - { dir: backend, file: backend/Dockerfile.acme, name: backend-acme, imageName: backend-acme, target: production }
          - { dir: backend, file: backend/Dockerfile.server, name: backend-server, imageName: backend-server, target: production }
          - { dir: frontend, file: frontend/Dockerfile, name: frontend, imageName: frontend, target: production }
      fail-fast: false
    permissions:
      packages: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - if: matrix.images.name == 'frontend'
        name: Apply patches
        run: touch frontend/apply-patches.sh

      - uses: docker/setup-buildx-action@v3
        name: Setup Docker Builder
        with:
          install: true

      - uses: docker/login-action@v3
        name: Login to GitHub Container Registry
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#      - run: echo "DOCKER_BUILD_CHECKS_ANNOTATIONS=false" >> $GITHUB_ENV
#      - run: echo "DOCKER_BUILD_RECORD_UPLOAD=false" >> $GITHUB_ENV
#      - run: echo "DOCKER_BUILD_SUMMARY=false" >> $GITHUB_ENV

      - uses: docker/build-push-action@v6
        name: Build image
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha,mode=max,scope=${{ github.ref_name }}-${{ matrix.images.name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-${{ matrix.images.name }}
          context: ${{ matrix.images.dir }}
          file: ${{ matrix.images.file }}
          build-args: |
            VERSION=v0.0.0+${{ github.sha }}
          target: production
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.images.imageName }}:${{ github.sha }}

  build-helm-package:
    name: Build Helm chart
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.package.outputs.version }}
    permissions:
      contents: read
      packages: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package
        id: package
        env:
          IMAGES_TAG: ${{ github.sha }}
          VERSION: "0.0.0+${{ github.sha }}"
        run: |
          task -v package-helm-chart
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Push
        run: |
          helm push *.tgz oci://ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

  run-e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-22.04
    needs: [ build-helm-package ]
    permissions:
      id-token: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup DNS
        run: task -v setup-domain-dns

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.x
          cache: npm
          cache-dependency-path: e2e/package-lock.json

      - name: Setup dependencies
        run: |
          npm ci
          npx playwright install --with-deps
        working-directory: e2e

      - name: Setup Cluster
        id: setup-cluster
        run: task -v setup-cluster

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Helm package
        env:
          HELM_PACKAGE_VERSION: ${{ needs.build-helm-package.outputs.version }}
        run: |
          helm install greenstar \
            oci://ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.event.repository.name }} \
            --version "${HELM_PACKAGE_VERSION}" \
            --create-namespace --namespace="greenstar" \
            --values deploy/local/chart-ci-values.yaml \
            --wait

      - name: Run tests
        id: test
        run: npx playwright test
        working-directory: e2e

      - name: Export cluster state
        id: export-cluster-state
        if: success() || steps.setup-cluster.outcome == 'failure' || steps.setup-cluster.outcome == 'success'
        run: |
          kubectl cluster-info dump --output=yaml --output-directory=./cluster-state --namespaces=ingress,observability,greenstar
          kubectl get gateways.gateway.networking.k8s.io --output=yaml --all-namespaces > ./cluster-state/gateways.yaml
          kubectl get httproutes.gateway.networking.k8s.io --output=yaml --all-namespaces > ./cluster-state/httproutes.yaml
          kubectl get tlsroutes.gateway.networking.k8s.io --output=yaml --all-namespaces > ./cluster-state/tlsroutes.yaml

      - name: Upload cluster state artifact
        uses: actions/upload-artifact@v4
        if: success() || steps.export-cluster-state.outcome == 'success'
        with:
          name: cluster-state
          path: ./cluster-state
          include-hidden-files: true

      - name: Teardown
        run: task teardown
        if: success() || steps.setup-cluster.outcome == 'success' || steps.setup-cluster.outcome == 'failure'

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        with:
          name: e2e-test-results
          path: ./e2e/monocart-report/
          include-hidden-files: true

  upload-e2e-results:
    name: Upload E2E Results
    runs-on: ubuntu-22.04
    if: success() || needs.run-e2e-tests.result == 'success' || needs.run-e2e-tests.result == 'failure'
    needs: [ run-e2e-tests ]
    permissions:
      id-token: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-oidc

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: ./staging/e2e-report

      - name: Upload artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          process_gcloudignore: 'false'
          path: ./staging/e2e-report
          destination: arikkfir-static-website/github/greenstar/${{ github.run_id }}-${{ github.run_attempt }}/

      - name: Add job summary
        run: |
          echo "End-to-end test results can be accessed here: https://static.kfirs.com/github/greenstar/${{ github.run_id }}-${{ github.run_attempt }}/e2e-report/" >> $GITHUB_STEP_SUMMARY
