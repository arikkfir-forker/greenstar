name: Build

on:
  push:
    branches:
      - '*'
  pull_request:
    types:
      - opened
      - synchronize

defaults:
  run:
    shell: bash -exuo pipefail {0}

jobs:

  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: backend/go.mod
          cache-dependency-path: backend/go.sum

      - run: go test ./...
        working-directory: backend

  verify-code-format:
    name: Verify code format
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: backend/go.mod
          cache-dependency-path: backend/go.sum

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.x
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Generate
        run: task generate-rest

      - name: Format code
        run: task format-code

      - name: Verify
        run: git diff --compact-summary --exit-code

  docker:
    name: Build ${{ matrix.images.name }} image
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        images:
          - { dir: backend, file: backend/Dockerfile.migrate, name: backend-migrate, imageName: backend-migrate, target: production }
          - { dir: backend, file: backend/Dockerfile.acme, name: backend-acme, imageName: backend-acme, target: production }
          - { dir: backend, file: backend/Dockerfile.server, name: backend-server, imageName: backend-server, target: production }
          - { dir: frontend, file: frontend/Dockerfile, name: frontend, imageName: frontend, target: production }
      fail-fast: false
    permissions:
      packages: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          APPLY_PATCHES_SH: "op://GreenSTAR/mtg3xwmgngg5jzt6oft53btkci/frontend/apply-patches.sh"
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_GREENSTAR }}

      - if: matrix.images.name == 'frontend'
        name: Apply patches
        run: |-
          cat > frontend/apply-patches.sh <<PATCHES_EOF
          ${APPLY_PATCHES_SH}
          PATCHES_EOF

      - uses: docker/setup-buildx-action@v2
        name: Setup Docker Builder
        with:
          install: true

      - uses: docker/login-action@v3
        name: Login to GitHub Container Registry
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        name: Build image
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha,scope=${{ github.ref_name }}-${{ matrix.images.name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-${{ matrix.images.name }}
          context: ${{ matrix.images.dir }}
          file: ${{ matrix.images.file }}
          build-args: |
            VERSION=v0.0.0+${{ github.sha }}
          target: production
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.images.imageName }}:${{ github.sha }}

  build-helm-package:
    name: Build Helm chart
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.package.outputs.version }}
    permissions:
      contents: read
      packages: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package
        id: package
        env:
          IMAGES_TAG: ${{ github.sha }}
          VERSION: "0.0.0+${{ github.sha }}"
        run: |
          task -v package-helm-chart
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Push
        run: |
          helm push *.tgz oci://ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

  run-e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-22.04
    needs: [ build-helm-package ]
    env:
      CLUSTER_NAME: greenstar-ci-${{ github.run_id }}-${{ github.run_attempt }}
    permissions:
      packages: read
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup DNS
        run: task -v setup-domain-dns

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.x
          cache: npm
          cache-dependency-path: e2e/package-lock.json

      - name: Setup dependencies
        run: |
          npm ci
          npx playwright install --with-deps
        working-directory: e2e

      - name: Setup Cluster
        id: setup-cluster
        run: task -v setup-cluster

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install application
        env:
          HELM_PACKAGE_VERSION: ${{ needs.build-helm-package.outputs.version }}
        run: |
          helm install greenstar \
            oci://ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.event.repository.name }} \
            --version "${HELM_PACKAGE_VERSION}" \
            --create-namespace --namespace="greenstar" \
            --values deploy/local/chart-ci-values.yaml

      - name: Sanity
        run: curl -i https://acme.app.greenstar.test/

      - name: Run tests
        id: test
        run: npx playwright test
        working-directory: e2e

      - name: Export cluster info
        if: success() || steps.setup-cluster.outcome == 'failure' || steps.setup-cluster.outcome == 'success'
        run: |
          kubectl cluster-info dump --namespaces=ingress,observability,greenstar --output-directory=./cluster-info

      - name: Teardown
        run: task teardown
        if: success() || steps.setup-cluster.outcome == 'success' || steps.setup-cluster.outcome == 'failure'

      - name: Upload cluster information artifact
        if: success() || steps.setup-cluster.outcome == 'failure' || steps.setup-cluster.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: cluster-info
          path: cluster-info

      - name: Upload e2e test results artifact
        if: success() || steps.setup-cluster.outcome == 'failure' || steps.setup-cluster.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: ./e2e/monocart-report/

  public-test-results:
    name: Publish test results
    runs-on: ubuntu-22.04
    if: success() || needs.run-e2e-tests.result == 'failure' || needs.run-e2e-tests.result == 'success'
    needs: [ run-e2e-tests ]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # TODO: move PR/commit comments updates to here
