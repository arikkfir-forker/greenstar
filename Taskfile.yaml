version: 3
output: prefixed

env:
  CLUSTER_NAME: greenstar
  DOMAIN: greenstar.test

dotenv:
  - .env

run: once

includes:
  toolchain:
    internal: true
    optional: false
    taskfile: build/Taskfile-toolchain.yaml

set:
  - x

silent: true

tasks:

  setup-domain-dns: { deps: [ toolchain:setup-domain-dns ] }

  generate-certificates:
    deps: [ toolchain:mkcert ]
    cmds:
      - mkcert -cert-file deploy/local/wildcard-tls.crt -key-file deploy/local/wildcard-tls.key "${DOMAIN}" "*.app.${DOMAIN}" "*.${DOMAIN}" "localhost" "127.0.0.1" "::1"
      - defer: rm -fv deploy/local/wildcard-tls.crt deploy/local/wildcard-tls.key
      - kubectl create secret tls wildcard-tls --cert=deploy/local/wildcard-tls.crt --key=deploy/local/wildcard-tls.key --dry-run=client --output=yaml > deploy/local/wildcard-tls-secret.yaml
    status:
      - test -f deploy/local/wildcard-tls-secret.yaml

  create-cluster:
    deps: [ toolchain:kind ]
    cmds:
      - kind create cluster --name "${CLUSTER_NAME}" --config=deploy/local/kind-cluster-config.yaml --wait "1m"
    status:
      - kind get clusters -q | grep -E "^${CLUSTER_NAME}\$"

  teardown-cluster:
    deps: [ toolchain:kind ]
    cmds:
      - kind delete cluster --name "${CLUSTER_NAME}"
    status:
      - test "$(kind get clusters --quiet 2>/dev/null | grep -E "^${CLUSTER_NAME}\$"| wc -l | sed 's/^[ \t]*//')" = "0"

  install-gateway-api-crds:
    deps: [ create-cluster ]
    cmds:
      - curl -sSL "https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/experimental-install.yaml" | kubectl apply -f -
    status:
      - kubectl get crd | grep gateway.networking.k8s.io

  install-traefik:
    deps: [ install-gateway-api-crds ]
    cmds:
      - |
        helm upgrade --install traefik traefik \
          --repo "https://traefik.github.io/charts" --version="v30.1.0" \
          --create-namespace --namespace="ingress" \
          -f deploy/local/traefik-values.yaml \
          --wait
    status:
      - helm --namespace=ingress get metadata traefik

  setup-gateway:
    deps: [ install-traefik, generate-certificates ]
    cmds:
      - kubectl apply --namespace=ingress -f ./deploy/local/wildcard-tls-secret.yaml
      - kubectl apply --namespace=ingress -f ./deploy/local/ingress-gateway.yaml
    status:
      - kubectl diff --namespace=ingress -f ./deploy/local/wildcard-tls-secret.yaml
      - kubectl diff --namespace=ingress -f ./deploy/local/ingress-gateway.yaml

  setup-observability:
    deps: [ setup-gateway ]
    cmds:
      - |
        helm upgrade --install metrics-server metrics-server \
          --repo https://kubernetes-sigs.github.io/metrics-server --version="v3.12.2" \
          --create-namespace --namespace=observability \
          --set 'args={"--kubelet-insecure-tls"}' \
          --wait
        helm upgrade --install kube-prometheus-stack kube-prometheus-stack \
          --repo=https://prometheus-community.github.io/helm-charts --version="v66.2.1" \
          --create-namespace --namespace=observability \
          --set cleanPrometheusOperatorObjectNames=true \
          -f deploy/local/kube-prometheus-stack-values.yaml \
         --wait
        kubectl apply --namespace=observability -f deploy/local/kube-prometheus-stack-routes.yaml
        kubectl apply --namespace=observability -f deploy/local/jaeger-all-in-one.yaml
    status:
      - helm --namespace=observability get metadata metrics-server
      - helm --namespace=observability get metadata kube-prometheus-stack
      - kubectl diff --namespace=observability -f deploy/local/kube-prometheus-stack-routes.yaml
      - kubectl diff --namespace=observability -f deploy/local/jaeger-all-in-one.yaml

  setup-cluster:
    deps: [ setup-gateway ]

  download-backend-dependencies:
    deps: [ toolchain:go ]
    dir: backend
    cmds:
      - go mod tidy
    status:
      - go mod tidy -diff

  download-frontend-dependencies:
    deps: [ toolchain:node ]
    dir: frontend
    cmds:
      - npm ci --no-fund

  download-dependencies:
    deps: [ download-backend-dependencies, download-frontend-dependencies ]

  format-backend-code:
    deps: [ download-backend-dependencies ]
    dir: backend
    cmds:
      - go fmt ./...
    status:
      - test -z "$(gofmt -d .)"

  format-frontend-code:
    deps: [ download-frontend-dependencies ]
    dir: frontend
    cmds:
      - ./node_modules/.bin/prettier --list-different --write .
    status:
      - ./node_modules/.bin/prettier --list-different .

  format-code:
    deps: [ format-backend-code, format-frontend-code ]

  build-rest-generator:
    dir: scripts/rest-generator
    cmds:
      - go mod tidy
      - go build -o ../../bin/rest-generator *.go
    sources:
      - 'go.*'
      - '*.go'
      - '*.yaml'
      - templates/**/*
    generates:
      - ../../bin/rest-generator

  generate-rest:
    deps: [ build-rest-generator ]
    cmds:
      - ./bin/rest-generator -api-file=api.yaml
      - task: format-code
    sources:
      - ./api.yaml
      - ./bin/rest-generator
    generates:
      - backend/internal/server/server.go
      - backend/internal/server/resources/*/*.yaml
      - exclude: backend/internal/server/resources/*/*_impl.go
      - frontend/src/hooks/create.*.ts
      - frontend/src/hooks/delete.*.ts
      - frontend/src/hooks/deleteAll.*.ts
      - frontend/src/hooks/get.*.ts
      - frontend/src/hooks/list.*.ts
      - frontend/src/hooks/patch.*.ts
      - frontend/src/hooks/update.*.ts
      - frontend/src/models/*.ts

  deploy:
    deps: [ generate-rest, setup-cluster ]
    cmds:
      - skaffold build -q > hack/skaffold-build.json
      - skaffold deploy --load-images --build-artifacts hack/skaffold-build.json

  undeploy:
    cmds:
      - skaffold delete

  dev:
    deps: [ generate-rest, setup-cluster ]
    cmds:
      - touch ./hack/greenstar-values.yaml
      - yq -i '.frontend.extraEnv.VITE_GEOAPIFY_API_KEY.value = env(GEOAPIFY_API_KEY)' ./hack/greenstar-values.yaml
      - skaffold dev --tail=false --toot=true

  teardown:
    deps: [ teardown-cluster ]

  package-helm-chart:
    deps: [ toolchain:helm ]
    cmds:
      - yq -i ".backend.acme.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - yq -i ".backend.migrate.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - yq -i ".backend.server.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - yq -i ".frontend.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - helm package ./deploy/chart --app-version "${VERSION}" --version "${VERSION}"
    preconditions:
      - test -n "${IMAGES_TAG}"
      - test -n "${VERSION}"

  test:
    deps: [ toolchain:node ]
    dir: e2e
    cmds:
      - npx playwright test {{.CLI_ARGS}}

  test-report:
    deps: [ toolchain:node ]
    dir: e2e
    cmds:
      - npx playwright show-report

  install-telepresence:
    deps: [ create-cluster ]
    cmds:
      - telepresence helm install
    status:
      - helm --namespace=ambassador get metadata traffic-manager

  telepresence-connect:
    deps: [ install-telepresence ]
    cmds:
      - telepresence uninstall --all-agents || true
      - telepresence quit --stop-daemons || true
      - telepresence connect --namespace=greenstar
    status:
      - test "$(telepresence status --output yaml|yq '.root_daemon.running')" = "true"
      - test "$(telepresence status --output yaml|yq '.traffic_manager.traffic_agent != null')" = "true"
      - test "$(telepresence status --output yaml|yq '.user_daemon.namespace')" = "greenstar"
      - test "$(telepresence status --output yaml|yq '.user_daemon.running')" = "true"
      - test "$(telepresence status --output yaml|yq '.user_daemon.status')" = "Connected"

  telepresence-intercept-backend-server:
    deps: [ telepresence-connect ]
    cmds:
      # TODO: re-enable mounting once sshfs is set up
      - telepresence intercept "greenstar-backend-server" --env-file backend/telepresence.env --mount false --port 8080:80
    status:
      - telepresence status --output=yaml | yq -e ".user_daemon.intercepts[] | select(.name == \"greenstar-backend-server\") | [.name] | length == 1"

  telepresence-leave-backend-server:
    deps: [ telepresence-connect ]
    cmds:
      - telepresence leave "greenstar-backend-server"
    status:
      - telepresence status --output=yaml | yq -e ".user_daemon.intercepts[] | select(.name == \"greenstar-backend-server\") | [.name] | length == 0"

  telepresence-intercept-frontend:
    deps: [ telepresence-connect ]
    cmds:
      # TODO: re-enable mounting once sshfs is set up
      - telepresence intercept "greenstar-frontend" --env-file frontend/telepresence.env --mount false --port 3000:80
    status:
      - telepresence status --output=yaml | yq -e ".user_daemon.intercepts[] | select(.name == \"greenstar-frontend\") | [.name] | length == 1"

  telepresence-leave-frontend:
    deps: [ telepresence-connect ]
    cmds:
      - telepresence leave "greenstar-frontend"
    status:
      - telepresence status --output=yaml | yq -e ".user_daemon.intercepts[] | select(.name == \"greenstar-frontend\") | [.name] | length == 0"
